// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: capwap.proto

package capwap

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息码厂商，或者厂商自定义模块
type VendorType int32

const (
	VendorType_Gbcom VendorType = 0
)

// Enum value maps for VendorType.
var (
	VendorType_name = map[int32]string{
		0: "Gbcom",
	}
	VendorType_value = map[string]int32{
		"Gbcom": 0,
	}
)

func (x VendorType) Enum() *VendorType {
	p := new(VendorType)
	*p = x
	return p
}

func (x VendorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VendorType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[0].Descriptor()
}

func (VendorType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[0]
}

func (x VendorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VendorType.Descriptor instead.
func (VendorType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{0}
}

// 消息类型
type MsgType int32

const (
	MsgType_Response   MsgType = 0 // get/set/inform.request response
	MsgType_GetRequest MsgType = 1 // 查询请求，返回响应
	MsgType_SetRequest MsgType = 2 // 设置设置，返回响应
	MsgType_Trap       MsgType = 3 // 客户端向server端，trap.request, server不需要响应
	MsgType_Inform     MsgType = 4 // 客户端向server端，inform.request, server需要响应
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0: "Response",
		1: "GetRequest",
		2: "SetRequest",
		3: "Trap",
		4: "Inform",
	}
	MsgType_value = map[string]int32{
		"Response":   0,
		"GetRequest": 1,
		"SetRequest": 2,
		"Trap":       3,
		"Inform":     4,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[1].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[1]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{1}
}

// 消息代码,消息中携带的有效消息类型
type MsgCodeType int32

const (
	MsgCodeType_Invailed       MsgCodeType = 0
	MsgCodeType_Reboot         MsgCodeType = 1  // omc对设备设置重启
	MsgCodeType_Alarm          MsgCodeType = 2  // 设备向omc发送告警
	MsgCodeType_Discover       MsgCodeType = 3  // 设备向omc发送发现消息【上线请求】
	MsgCodeType_OnlineStatus   MsgCodeType = 4  // omc向设备发送设置上线状态，客户端回应上线状态
	MsgCodeType_Keepalive      MsgCodeType = 5  // 客户端向server端发送的保活消息
	MsgCodeType_Cfgtags        MsgCodeType = 6  // 客户端向server端发送的查询配置标签消息，server端需要给响应
	MsgCodeType_VersionUpgrade MsgCodeType = 7  // OMC向客户端方发送需要执行升级到目标版本，并重启, MC向客户端发送的消息携带MsgFile
	MsgCodeType_ConfigUpgrade  MsgCodeType = 8  // OMC向客户端方发送需要同步整体配置，并重启, OMC向客户端发送的消息携带MsgFile
	MsgCodeType_ConfigUpload   MsgCodeType = 9  // OMC上没有设备配置文件，设备首次上线时必须上传配置文件，OMC上保留备份; OMC向客户端发送的消息携带MsgFile
	MsgCodeType_HbLteSignal    MsgCodeType = 10 // 客户端向OMC每秒发送空口信号质量
	MsgCodeType_HbWlanSignal   MsgCodeType = 11 // 客户端向OMC每秒发送空口信号质量
	MsgCodeType_HbBoradStatus  MsgCodeType = 12 // 客户端向OMC每15秒钟发送资源利用统计消息，端口流量
	MsgCodeType_HbPerMinute    MsgCodeType = 13 // 客户端向OMC每60秒钟发送disk资源利用率
	MsgCodeType_BoradInfo      MsgCodeType = 14 // 设备上线时，主动向OMC上报一次单板信息
)

// Enum value maps for MsgCodeType.
var (
	MsgCodeType_name = map[int32]string{
		0:  "Invailed",
		1:  "Reboot",
		2:  "Alarm",
		3:  "Discover",
		4:  "OnlineStatus",
		5:  "Keepalive",
		6:  "Cfgtags",
		7:  "VersionUpgrade",
		8:  "ConfigUpgrade",
		9:  "ConfigUpload",
		10: "HbLteSignal",
		11: "HbWlanSignal",
		12: "HbBoradStatus",
		13: "HbPerMinute",
		14: "BoradInfo",
	}
	MsgCodeType_value = map[string]int32{
		"Invailed":       0,
		"Reboot":         1,
		"Alarm":          2,
		"Discover":       3,
		"OnlineStatus":   4,
		"Keepalive":      5,
		"Cfgtags":        6,
		"VersionUpgrade": 7,
		"ConfigUpgrade":  8,
		"ConfigUpload":   9,
		"HbLteSignal":    10,
		"HbWlanSignal":   11,
		"HbBoradStatus":  12,
		"HbPerMinute":    13,
		"BoradInfo":      14,
	}
)

func (x MsgCodeType) Enum() *MsgCodeType {
	p := new(MsgCodeType)
	*p = x
	return p
}

func (x MsgCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[2].Descriptor()
}

func (MsgCodeType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[2]
}

func (x MsgCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgCodeType.Descriptor instead.
func (MsgCodeType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{2}
}

// 针对查询、设置、inform消息响应结果
type ErrCodeType int32

const (
	ErrCodeType_Ok           ErrCodeType = 0 // 成功
	ErrCodeType_FileNotExist ErrCodeType = 1 // 文件不存在
)

// Enum value maps for ErrCodeType.
var (
	ErrCodeType_name = map[int32]string{
		0: "Ok",
		1: "FileNotExist",
	}
	ErrCodeType_value = map[string]int32{
		"Ok":           0,
		"FileNotExist": 1,
	}
)

func (x ErrCodeType) Enum() *ErrCodeType {
	p := new(ErrCodeType)
	*p = x
	return p
}

func (x ErrCodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[3].Descriptor()
}

func (ErrCodeType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[3]
}

func (x ErrCodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCodeType.Descriptor instead.
func (ErrCodeType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{3}
}

// 设备工作状态
type OnlineStatusType int32

const (
	OnlineStatusType_Offline         OnlineStatusType = 0 // 在网管离线，此状态设备检测到告警信息应该缓存，上线后依次发出
	OnlineStatusType_Online          OnlineStatusType = 1 // 在网管在线，应周期性发送心跳查询网管是否需要升级和配置同步
	OnlineStatusType_VersionUpdating OnlineStatusType = 2 // 版本升级中，此状态下心跳还在发送，但心跳中携带的版本和配置信息不在检查更新
	OnlineStatusType_ConfigUpdating  OnlineStatusType = 3 // 配置同步中，此状态下心跳还在发送，但心跳中携带的版本和配置信息不在检查更新
)

// Enum value maps for OnlineStatusType.
var (
	OnlineStatusType_name = map[int32]string{
		0: "Offline",
		1: "Online",
		2: "VersionUpdating",
		3: "ConfigUpdating",
	}
	OnlineStatusType_value = map[string]int32{
		"Offline":         0,
		"Online":          1,
		"VersionUpdating": 2,
		"ConfigUpdating":  3,
	}
)

func (x OnlineStatusType) Enum() *OnlineStatusType {
	p := new(OnlineStatusType)
	*p = x
	return p
}

func (x OnlineStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnlineStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[4].Descriptor()
}

func (OnlineStatusType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[4]
}

func (x OnlineStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnlineStatusType.Descriptor instead.
func (OnlineStatusType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{4}
}

// 配置标识,对应/etc/config目录下每个配置文件,为保持字段名和配置文件名一致，此处类型名称用文件名
type CfgTagType int32

const (
	CfgTagType_finger        CfgTagType = 0  // 所有配置的唯一标识
	CfgTagType_cnss_diag     CfgTagType = 1  //
	CfgTagType_ddns          CfgTagType = 2  //
	CfgTagType_dhcp          CfgTagType = 3  //
	CfgTagType_dhcrelay      CfgTagType = 4  //
	CfgTagType_dropbear      CfgTagType = 5  //
	CfgTagType_ecm           CfgTagType = 6  //
	CfgTagType_filedl        CfgTagType = 7  //
	CfgTagType_firewall      CfgTagType = 8  //
	CfgTagType_fstab         CfgTagType = 9  //
	CfgTagType_ipsec         CfgTagType = 10 //
	CfgTagType_luci          CfgTagType = 11 //
	CfgTagType_macsec        CfgTagType = 12 //
	CfgTagType_mcproxy       CfgTagType = 13 //
	CfgTagType_mcsd          CfgTagType = 14 //
	CfgTagType_multiwan      CfgTagType = 15 //
	CfgTagType_network       CfgTagType = 16 //
	CfgTagType_nss           CfgTagType = 17 //
	CfgTagType_pppoe         CfgTagType = 18 //
	CfgTagType_qcacfg80211   CfgTagType = 19 //
	CfgTagType_ripd          CfgTagType = 20 //
	CfgTagType_rpcd          CfgTagType = 21 //
	CfgTagType_rstp          CfgTagType = 22 //
	CfgTagType_skb_recycler  CfgTagType = 23 //
	CfgTagType_ssid_steering CfgTagType = 24 //
	CfgTagType_sysstat       CfgTagType = 25 //
	CfgTagType_system        CfgTagType = 26 //
	CfgTagType_thermal       CfgTagType = 27 //
	CfgTagType_ubootenv      CfgTagType = 28 //
	CfgTagType_ucitrack      CfgTagType = 29 //
	CfgTagType_uhttpd        CfgTagType = 30 //
	CfgTagType_upnpd         CfgTagType = 31 //
	CfgTagType_wireless      CfgTagType = 32 //
)

// Enum value maps for CfgTagType.
var (
	CfgTagType_name = map[int32]string{
		0:  "finger",
		1:  "cnss_diag",
		2:  "ddns",
		3:  "dhcp",
		4:  "dhcrelay",
		5:  "dropbear",
		6:  "ecm",
		7:  "filedl",
		8:  "firewall",
		9:  "fstab",
		10: "ipsec",
		11: "luci",
		12: "macsec",
		13: "mcproxy",
		14: "mcsd",
		15: "multiwan",
		16: "network",
		17: "nss",
		18: "pppoe",
		19: "qcacfg80211",
		20: "ripd",
		21: "rpcd",
		22: "rstp",
		23: "skb_recycler",
		24: "ssid_steering",
		25: "sysstat",
		26: "system",
		27: "thermal",
		28: "ubootenv",
		29: "ucitrack",
		30: "uhttpd",
		31: "upnpd",
		32: "wireless",
	}
	CfgTagType_value = map[string]int32{
		"finger":        0,
		"cnss_diag":     1,
		"ddns":          2,
		"dhcp":          3,
		"dhcrelay":      4,
		"dropbear":      5,
		"ecm":           6,
		"filedl":        7,
		"firewall":      8,
		"fstab":         9,
		"ipsec":         10,
		"luci":          11,
		"macsec":        12,
		"mcproxy":       13,
		"mcsd":          14,
		"multiwan":      15,
		"network":       16,
		"nss":           17,
		"pppoe":         18,
		"qcacfg80211":   19,
		"ripd":          20,
		"rpcd":          21,
		"rstp":          22,
		"skb_recycler":  23,
		"ssid_steering": 24,
		"sysstat":       25,
		"system":        26,
		"thermal":       27,
		"ubootenv":      28,
		"ucitrack":      29,
		"uhttpd":        30,
		"upnpd":         31,
		"wireless":      32,
	}
)

func (x CfgTagType) Enum() *CfgTagType {
	p := new(CfgTagType)
	*p = x
	return p
}

func (x CfgTagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CfgTagType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[5].Descriptor()
}

func (CfgTagType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[5]
}

func (x CfgTagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CfgTagType.Descriptor instead.
func (CfgTagType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{5}
}

type PortType int32

const (
	PortType_Eth       PortType = 0 // 电口以太网
	PortType_Sfp       PortType = 1 // 光口以太网
	PortType_Lte       PortType = 2 // usb以太网口
	PortType_WiFi      PortType = 3 //
	PortType_bluetooth PortType = 4 // 蓝牙串口
	PortType_console   PortType = 5 // rs232或者rs458串口
)

// Enum value maps for PortType.
var (
	PortType_name = map[int32]string{
		0: "Eth",
		1: "Sfp",
		2: "Lte",
		3: "WiFi",
		4: "bluetooth",
		5: "console",
	}
	PortType_value = map[string]int32{
		"Eth":       0,
		"Sfp":       1,
		"Lte":       2,
		"WiFi":      3,
		"bluetooth": 4,
		"console":   5,
	}
)

func (x PortType) Enum() *PortType {
	p := new(PortType)
	*p = x
	return p
}

func (x PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[6].Descriptor()
}

func (PortType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[6]
}

func (x PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortType.Descriptor instead.
func (PortType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{6}
}

// 传输文件的类型
type FileType int32

const (
	FileType_Unknown    FileType = 0 // 未知文件类型
	FileType_Log        FileType = 1 // 日志文件，OMC向客户端发起上传指定时间内的日志文件
	FileType_Pcap       FileType = 2 // 抓包文件，OMC向客户端发起上传指定时间内的通信报文文件
	FileType_Version    FileType = 3 // 设备向OMC发起下载版本文件
	FileType_ConfigTar  FileType = 4 // 设备向OMC发起下载配置文件,tar包，总配置
	FileType_ConfigText FileType = 5 // 设备向OMC发起下载单个的配置文件【etc/config目录下的文件】
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "Unknown",
		1: "Log",
		2: "Pcap",
		3: "Version",
		4: "ConfigTar",
		5: "ConfigText",
	}
	FileType_value = map[string]int32{
		"Unknown":    0,
		"Log":        1,
		"Pcap":       2,
		"Version":    3,
		"ConfigTar":  4,
		"ConfigText": 5,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_capwap_proto_enumTypes[7].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_capwap_proto_enumTypes[7]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{7}
}

// 请求消息的头部
type MsgHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32       `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                            // 消息协议版本号，暂不是使用;hdr中增加了verdor,消息定义需要改变通过字段修订，version预留为整个消息包全新定义
	Id      uint32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`                                      // 消息包ID号，唯一【一个设备主动发出的消息包，ID自增、唯一】
	Vendor  VendorType  `protobuf:"varint,3,opt,name=vendor,proto3,enum=gbcom.capwap.VendorType" json:"vendor,omitempty"` // 厂商，不同的厂商对消息码可以重新定义【mcode对应的消息结构体】
	Mcode   MsgCodeType `protobuf:"varint,4,opt,name=mcode,proto3,enum=gbcom.capwap.MsgCodeType" json:"mcode,omitempty"`  // 消息码，与消息结构体一一对应
	Ecode   ErrCodeType `protobuf:"varint,5,opt,name=ecode,proto3,enum=gbcom.capwap.ErrCodeType" json:"ecode,omitempty"`  // 错误吗，针对请求响应反馈响应的结果
	Error   string      `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`                                 // 若响应码失败，可能携带失败的原因
	Mac     string      `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`                                     // 客户端->OMC的消息必须携带此参数，若客户端设备为动态IP地址，必须携带此参数标识消息包归属哪个设备;格式A1:B2:C3:D4:E5:F6
}

func (x *MsgHeader) Reset() {
	*x = MsgHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHeader) ProtoMessage() {}

func (x *MsgHeader) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHeader.ProtoReflect.Descriptor instead.
func (*MsgHeader) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{0}
}

func (x *MsgHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *MsgHeader) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MsgHeader) GetVendor() VendorType {
	if x != nil {
		return x.Vendor
	}
	return VendorType_Gbcom
}

func (x *MsgHeader) GetMcode() MsgCodeType {
	if x != nil {
		return x.Mcode
	}
	return MsgCodeType_Invailed
}

func (x *MsgHeader) GetEcode() ErrCodeType {
	if x != nil {
		return x.Ecode
	}
	return ErrCodeType_Ok
}

func (x *MsgHeader) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *MsgHeader) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

// OMC与设备之间通信的数据消息体结构
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type           MsgType           `protobuf:"varint,1,opt,name=type,proto3,enum=gbcom.capwap.MsgType" json:"type,omitempty"` // 消息类型
	Header         *MsgHeader        `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`                        // 请求消息头部
	Alarm          *MsgAlarm         `protobuf:"bytes,3,opt,name=alarm,proto3" json:"alarm,omitempty"`                          // 告警消息
	Discover       *MsgDiscover      `protobuf:"bytes,4,opt,name=discover,proto3" json:"discover,omitempty"`                    // 发现消息
	OnlineStatus   *MsgOnline        `protobuf:"bytes,5,opt,name=onlineStatus,proto3" json:"onlineStatus,omitempty"`            // omc->设置客户端上线消息，客户端->响应上线消息
	Keepalive      *MsgKeepalive     `protobuf:"bytes,6,opt,name=keepalive,proto3" json:"keepalive,omitempty"`                  // 客户端向OMC端发送的保活消息
	Cfgtags        *MsgCfgtags       `protobuf:"bytes,7,opt,name=cfgtags,proto3" json:"cfgtags,omitempty"`                      // 客户端向OMC端发送的查询配置标签消息，OMC端需要给响应; 客户端通过心跳消息主动检查配置同步
	VersionUpgrade *MsgFile          `protobuf:"bytes,8,opt,name=versionUpgrade,proto3" json:"versionUpgrade,omitempty"`        // OMC向客户端方发送需要执行升级到目标版本，并重启; OMC主动发起的强制客户端升级; 正常运维模式不会有此流程
	ConfigUpgrade  *MsgFile          `protobuf:"bytes,9,opt,name=configUpgrade,proto3" json:"configUpgrade,omitempty"`          // OMC向客户端方发送需要同步整体配置，并重启; OMC主动泛起的强制客户端整体配置同步; 正常运维模式不会有此流程
	HbLteSignal    *MsgHbLteSignal   `protobuf:"bytes,10,opt,name=hbLteSignal,proto3" json:"hbLteSignal,omitempty"`             // 客户端向OMC每秒发送空口信号质量
	HbWlanSignal   *MsgHbWlanSignal  `protobuf:"bytes,11,opt,name=hbWlanSignal,proto3" json:"hbWlanSignal,omitempty"`           // 客户端向OMC每秒发送空口信号质量
	HbBoradStatus  *MsgHbBoradStatus `protobuf:"bytes,12,opt,name=hbBoradStatus,proto3" json:"hbBoradStatus,omitempty"`         // 客户端向OMC每15秒钟发送资源利用统计消息，端口流量
	HbPerMinute    *MsgHbPerMinute   `protobuf:"bytes,13,opt,name=hbPerMinute,proto3" json:"hbPerMinute,omitempty"`             // 客户端向OMC每60秒钟发送disk资源利用率
	BoradInfo      *MsgBoradInfo     `protobuf:"bytes,14,opt,name=boradInfo,proto3" json:"boradInfo,omitempty"`                 // 客户端在上线后，主动向OMC发送一次单板基本信息
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetType() MsgType {
	if x != nil {
		return x.Type
	}
	return MsgType_Response
}

func (x *Message) GetHeader() *MsgHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Message) GetAlarm() *MsgAlarm {
	if x != nil {
		return x.Alarm
	}
	return nil
}

func (x *Message) GetDiscover() *MsgDiscover {
	if x != nil {
		return x.Discover
	}
	return nil
}

func (x *Message) GetOnlineStatus() *MsgOnline {
	if x != nil {
		return x.OnlineStatus
	}
	return nil
}

func (x *Message) GetKeepalive() *MsgKeepalive {
	if x != nil {
		return x.Keepalive
	}
	return nil
}

func (x *Message) GetCfgtags() *MsgCfgtags {
	if x != nil {
		return x.Cfgtags
	}
	return nil
}

func (x *Message) GetVersionUpgrade() *MsgFile {
	if x != nil {
		return x.VersionUpgrade
	}
	return nil
}

func (x *Message) GetConfigUpgrade() *MsgFile {
	if x != nil {
		return x.ConfigUpgrade
	}
	return nil
}

func (x *Message) GetHbLteSignal() *MsgHbLteSignal {
	if x != nil {
		return x.HbLteSignal
	}
	return nil
}

func (x *Message) GetHbWlanSignal() *MsgHbWlanSignal {
	if x != nil {
		return x.HbWlanSignal
	}
	return nil
}

func (x *Message) GetHbBoradStatus() *MsgHbBoradStatus {
	if x != nil {
		return x.HbBoradStatus
	}
	return nil
}

func (x *Message) GetHbPerMinute() *MsgHbPerMinute {
	if x != nil {
		return x.HbPerMinute
	}
	return nil
}

func (x *Message) GetBoradInfo() *MsgBoradInfo {
	if x != nil {
		return x.BoradInfo
	}
	return nil
}

// 设备上线请求消息【发现消息】,别名是请求上线，客户端以trap消息类型发送，server端不需要响应
type MsgDiscover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevCode  int32  `protobuf:"varint,1,opt,name=devCode,proto3" json:"devCode,omitempty"`  // 设备代码
	Model    string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`       // 设备型号
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"` // 设备名称
	Sn       string `protobuf:"bytes,4,opt,name=sn,proto3" json:"sn,omitempty"`             // 设备sn号
	Mac      string `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`           // 设备mac
	Ip       string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`             // 设备管理IP
	Version  string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`   // 当前版本
}

func (x *MsgDiscover) Reset() {
	*x = MsgDiscover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgDiscover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgDiscover) ProtoMessage() {}

func (x *MsgDiscover) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgDiscover.ProtoReflect.Descriptor instead.
func (*MsgDiscover) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{2}
}

func (x *MsgDiscover) GetDevCode() int32 {
	if x != nil {
		return x.DevCode
	}
	return 0
}

func (x *MsgDiscover) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *MsgDiscover) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MsgDiscover) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *MsgDiscover) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *MsgDiscover) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MsgDiscover) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 设置上线，查询上线状态
type MsgOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status OnlineStatusType `protobuf:"varint,1,opt,name=status,proto3,enum=gbcom.capwap.OnlineStatusType" json:"status,omitempty"` // 网管向客户端发送设置上线消息，客户端应答此消息
}

func (x *MsgOnline) Reset() {
	*x = MsgOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgOnline) ProtoMessage() {}

func (x *MsgOnline) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgOnline.ProtoReflect.Descriptor instead.
func (*MsgOnline) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{3}
}

func (x *MsgOnline) GetStatus() OnlineStatusType {
	if x != nil {
		return x.Status
	}
	return OnlineStatusType_Offline
}

// 告警消息
type MsgAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn        string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`                // 告警序列号
	Timestamp int32  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 告警时间戳，发生时间
	Code      int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`           // 告警码
	Stat      int32  `protobuf:"varint,4,opt,name=stat,proto3" json:"stat,omitempty"`           // 告警类型，0：事件，1：告警产生，2：告警消除
	Info      string `protobuf:"bytes,5,opt,name=info,proto3" json:"info,omitempty"`            // 告警消息
	Sign      string `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`            // 告警签名，如果inform中标识 Lan4口down， 此处表示为Lan4
}

func (x *MsgAlarm) Reset() {
	*x = MsgAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgAlarm) ProtoMessage() {}

func (x *MsgAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgAlarm.ProtoReflect.Descriptor instead.
func (*MsgAlarm) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{4}
}

func (x *MsgAlarm) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *MsgAlarm) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *MsgAlarm) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *MsgAlarm) GetStat() int32 {
	if x != nil {
		return x.Stat
	}
	return 0
}

func (x *MsgAlarm) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *MsgAlarm) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 配置标识、标签
type CfgTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type CfgTagType `protobuf:"varint,1,opt,name=type,proto3,enum=gbcom.capwap.CfgTagType" json:"type,omitempty"` // 配置文件别名，采用enum方式避免字符输入错误
	Tag  string     `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`                                 // 配置文件的配置标识，tag值为空则没有此配置
}

func (x *CfgTag) Reset() {
	*x = CfgTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CfgTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CfgTag) ProtoMessage() {}

func (x *CfgTag) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CfgTag.ProtoReflect.Descriptor instead.
func (*CfgTag) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{5}
}

func (x *CfgTag) GetType() CfgTagType {
	if x != nil {
		return x.Type
	}
	return CfgTagType_finger
}

func (x *CfgTag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// 客户端向服务器发送的心跳消息; OMC向客户端应答该消息
type MsgKeepalive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uptime  int64   `protobuf:"varint,1,opt,name=uptime,proto3" json:"uptime,omitempty"`  // 系统上电运行工作时长,单位秒
	Version string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // 设备端正在运行的版本，通过心跳检查及时触发升级
	CftTag  *CfgTag `protobuf:"bytes,3,opt,name=CftTag,proto3" json:"CftTag,omitempty"`   // 客户端的配置标识，服务器端记录是否告警【主动判断】,客户端只上传globel一条消息，server端响应上根据server端的值更新此消息
}

func (x *MsgKeepalive) Reset() {
	*x = MsgKeepalive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgKeepalive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgKeepalive) ProtoMessage() {}

func (x *MsgKeepalive) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgKeepalive.ProtoReflect.Descriptor instead.
func (*MsgKeepalive) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{6}
}

func (x *MsgKeepalive) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *MsgKeepalive) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MsgKeepalive) GetCftTag() *CfgTag {
	if x != nil {
		return x.CftTag
	}
	return nil
}

// 客户端通过心跳消息判断与server端配置tag不一致，触发查询哪个配置文件不一致，并拉去配置文件更新配置
type MsgCfgtags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*CfgTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"` // 查询哪个文件
}

func (x *MsgCfgtags) Reset() {
	*x = MsgCfgtags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgCfgtags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgCfgtags) ProtoMessage() {}

func (x *MsgCfgtags) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgCfgtags.ProtoReflect.Descriptor instead.
func (*MsgCfgtags) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{7}
}

func (x *MsgCfgtags) GetTags() []*CfgTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Lte信号质量
type LteSinal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index    int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`       // LTE模块ID编号
	Attached int32 `protobuf:"varint,2,opt,name=attached,proto3" json:"attached,omitempty"` // 驻网状态
	Pcid     int32 `protobuf:"varint,3,opt,name=pcid,proto3" json:"pcid,omitempty"`         // 接入的PCI
	Rsrp     int32 `protobuf:"varint,4,opt,name=rsrp,proto3" json:"rsrp,omitempty"`         //
	Rsrq     int32 `protobuf:"varint,5,opt,name=rsrq,proto3" json:"rsrq,omitempty"`         //
	Rssi     int32 `protobuf:"varint,6,opt,name=rssi,proto3" json:"rssi,omitempty"`         //
	Sinr     int32 `protobuf:"varint,7,opt,name=sinr,proto3" json:"sinr,omitempty"`         //
}

func (x *LteSinal) Reset() {
	*x = LteSinal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LteSinal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LteSinal) ProtoMessage() {}

func (x *LteSinal) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LteSinal.ProtoReflect.Descriptor instead.
func (*LteSinal) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{8}
}

func (x *LteSinal) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LteSinal) GetAttached() int32 {
	if x != nil {
		return x.Attached
	}
	return 0
}

func (x *LteSinal) GetPcid() int32 {
	if x != nil {
		return x.Pcid
	}
	return 0
}

func (x *LteSinal) GetRsrp() int32 {
	if x != nil {
		return x.Rsrp
	}
	return 0
}

func (x *LteSinal) GetRsrq() int32 {
	if x != nil {
		return x.Rsrq
	}
	return 0
}

func (x *LteSinal) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *LteSinal) GetSinr() int32 {
	if x != nil {
		return x.Sinr
	}
	return 0
}

// TAU设备每秒向OMC发送的心跳状态消息
type MsgHbLteSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LteMod []*LteSinal `protobuf:"bytes,1,rep,name=lteMod,proto3" json:"lteMod,omitempty"` // lte模组信号状态
}

func (x *MsgHbLteSignal) Reset() {
	*x = MsgHbLteSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHbLteSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHbLteSignal) ProtoMessage() {}

func (x *MsgHbLteSignal) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHbLteSignal.ProtoReflect.Descriptor instead.
func (*MsgHbLteSignal) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{9}
}

func (x *MsgHbLteSignal) GetLteMod() []*LteSinal {
	if x != nil {
		return x.LteMod
	}
	return nil
}

// 有线口和无线口都用这个端口状态统计
type PortStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`   // 端口index
	Type   int32        `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`     // 端口类型
	Status int32        `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // 端口状态，0：down，1:10MH,2:10MF,3:100MH,4:100MF,5:1000MH,6:1000MF; H半双工，F全双工
	RxRate uint64       `protobuf:"varint,4,opt,name=rxRate,proto3" json:"rxRate,omitempty"` // 端口接收速率
	TxRate uint64       `protobuf:"varint,5,opt,name=txRate,proto3" json:"txRate,omitempty"` // 端口发送速率
	Sfp    *PortSfpArgs `protobuf:"bytes,6,opt,name=sfp,proto3" json:"sfp,omitempty"`        // 若端口为光口则携带此参数
}

func (x *PortStatistics) Reset() {
	*x = PortStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortStatistics) ProtoMessage() {}

func (x *PortStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortStatistics.ProtoReflect.Descriptor instead.
func (*PortStatistics) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{10}
}

func (x *PortStatistics) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PortStatistics) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PortStatistics) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PortStatistics) GetRxRate() uint64 {
	if x != nil {
		return x.RxRate
	}
	return 0
}

func (x *PortStatistics) GetTxRate() uint64 {
	if x != nil {
		return x.TxRate
	}
	return 0
}

func (x *PortStatistics) GetSfp() *PortSfpArgs {
	if x != nil {
		return x.Sfp
	}
	return nil
}

// 对光口的特殊参数定义
type PortSfpArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`             // 端口index
	Temperature int32 `protobuf:"varint,2,opt,name=temperature,proto3" json:"temperature,omitempty"` // 端口index
	RxPower     int32 `protobuf:"varint,3,opt,name=rxPower,proto3" json:"rxPower,omitempty"`         // 接收光功率
	TxPower     int32 `protobuf:"varint,4,opt,name=txPower,proto3" json:"txPower,omitempty"`         // 发射光功率
	TxBias      int32 `protobuf:"varint,5,opt,name=txBias,proto3" json:"txBias,omitempty"`           // 发射偏置电流
	Vcc         int32 `protobuf:"varint,6,opt,name=vcc,proto3" json:"vcc,omitempty"`                 // 发射器供电电压
}

func (x *PortSfpArgs) Reset() {
	*x = PortSfpArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSfpArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSfpArgs) ProtoMessage() {}

func (x *PortSfpArgs) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSfpArgs.ProtoReflect.Descriptor instead.
func (*PortSfpArgs) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{11}
}

func (x *PortSfpArgs) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PortSfpArgs) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *PortSfpArgs) GetRxPower() int32 {
	if x != nil {
		return x.RxPower
	}
	return 0
}

func (x *PortSfpArgs) GetTxPower() int32 {
	if x != nil {
		return x.TxPower
	}
	return 0
}

func (x *PortSfpArgs) GetTxBias() int32 {
	if x != nil {
		return x.TxBias
	}
	return 0
}

func (x *PortSfpArgs) GetVcc() int32 {
	if x != nil {
		return x.Vcc
	}
	return 0
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` // 对CPUx，DISKx,每个字对象的利用率
	Usage int32 `protobuf:"varint,2,opt,name=usage,proto3" json:"usage,omitempty"` // 利用率 1-100
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{12}
}

func (x *Usage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Usage) GetUsage() int32 {
	if x != nil {
		return x.Usage
	}
	return 0
}

type Borad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          int32             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                  // 设备单板号，每个单板是一个独立的系统
	CpuUsage       int32             `protobuf:"varint,2,opt,name=CpuUsage,proto3" json:"CpuUsage,omitempty"`            // 单个cpu的利用率不做统计，这个是总的利用率
	MemUsage       int32             `protobuf:"varint,3,opt,name=MemUsage,proto3" json:"MemUsage,omitempty"`            // 内存利用率
	DiskUsages     []*Usage          `protobuf:"bytes,4,rep,name=diskUsages,proto3" json:"diskUsages,omitempty"`         // 多个分区，每个分区的利用率，按照index排序
	PortStatistics []*PortStatistics `protobuf:"bytes,5,rep,name=portStatistics,proto3" json:"portStatistics,omitempty"` // 单板上端口速率统计
}

func (x *Borad) Reset() {
	*x = Borad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Borad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Borad) ProtoMessage() {}

func (x *Borad) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Borad.ProtoReflect.Descriptor instead.
func (*Borad) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{13}
}

func (x *Borad) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Borad) GetCpuUsage() int32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *Borad) GetMemUsage() int32 {
	if x != nil {
		return x.MemUsage
	}
	return 0
}

func (x *Borad) GetDiskUsages() []*Usage {
	if x != nil {
		return x.DiskUsages
	}
	return nil
}

func (x *Borad) GetPortStatistics() []*PortStatistics {
	if x != nil {
		return x.PortStatistics
	}
	return nil
}

// 设备每15向OMC发送的心跳状态消息
type MsgHbBoradStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Borads []*Borad `protobuf:"bytes,1,rep,name=borads,proto3" json:"borads,omitempty"` // 设备有多个单板，每个单板状态
}

func (x *MsgHbBoradStatus) Reset() {
	*x = MsgHbBoradStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHbBoradStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHbBoradStatus) ProtoMessage() {}

func (x *MsgHbBoradStatus) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHbBoradStatus.ProtoReflect.Descriptor instead.
func (*MsgHbBoradStatus) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{14}
}

func (x *MsgHbBoradStatus) GetBorads() []*Borad {
	if x != nil {
		return x.Borads
	}
	return nil
}

// 设备每分钟上报的状态消息
type MsgHbPerMinute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MsgHbPerMinute) Reset() {
	*x = MsgHbPerMinute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHbPerMinute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHbPerMinute) ProtoMessage() {}

func (x *MsgHbPerMinute) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHbPerMinute.ProtoReflect.Descriptor instead.
func (*MsgHbPerMinute) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{15}
}

// LTE模组基本信息
type LteModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"` //
	Model   string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Imei    string `protobuf:"bytes,4,opt,name=imei,proto3" json:"imei,omitempty"`
	Imsi    string `protobuf:"bytes,5,opt,name=imsi,proto3" json:"imsi,omitempty"`
}

func (x *LteModule) Reset() {
	*x = LteModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LteModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LteModule) ProtoMessage() {}

func (x *LteModule) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LteModule.ProtoReflect.Descriptor instead.
func (*LteModule) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{16}
}

func (x *LteModule) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *LteModule) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *LteModule) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LteModule) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *LteModule) GetImsi() string {
	if x != nil {
		return x.Imsi
	}
	return ""
}

// 单板的基本信息
type MsgBoradInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32        `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`        // 单板编号
	Model     int32        `protobuf:"varint,2,opt,name=model,proto3" json:"model,omitempty"`        // 设备型号编码
	Sn        string       `protobuf:"bytes,3,opt,name=sn,proto3" json:"sn,omitempty"`               // 主板sn
	Desc      string       `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`           // 单板描述信息，硬件版本号等
	BootVer   string       `protobuf:"bytes,5,opt,name=bootVer,proto3" json:"bootVer,omitempty"`     // boot版本号
	KernelVer string       `protobuf:"bytes,6,opt,name=kernelVer,proto3" json:"kernelVer,omitempty"` // kernel版本号
	FirmVer   string       `protobuf:"bytes,7,opt,name=FirmVer,proto3" json:"FirmVer,omitempty"`     // firmware，与discover消息中携带的设备当前运行版本一致
	LteMods   []*LteModule `protobuf:"bytes,8,rep,name=lteMods,proto3" json:"lteMods,omitempty"`     // 单板上携带的LTE模组信息
}

func (x *MsgBoradInfo) Reset() {
	*x = MsgBoradInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgBoradInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBoradInfo) ProtoMessage() {}

func (x *MsgBoradInfo) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgBoradInfo.ProtoReflect.Descriptor instead.
func (*MsgBoradInfo) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{17}
}

func (x *MsgBoradInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *MsgBoradInfo) GetModel() int32 {
	if x != nil {
		return x.Model
	}
	return 0
}

func (x *MsgBoradInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *MsgBoradInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *MsgBoradInfo) GetBootVer() string {
	if x != nil {
		return x.BootVer
	}
	return ""
}

func (x *MsgBoradInfo) GetKernelVer() string {
	if x != nil {
		return x.KernelVer
	}
	return ""
}

func (x *MsgBoradInfo) GetFirmVer() string {
	if x != nil {
		return x.FirmVer
	}
	return ""
}

func (x *MsgBoradInfo) GetLteMods() []*LteModule {
	if x != nil {
		return x.LteMods
	}
	return nil
}

// sta接入AP的状态【sta看到ap】，AP接入sta的状态【ap看到sta】
type WlanLinkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModIndex int32  `protobuf:"varint,1,opt,name=modIndex,proto3" json:"modIndex,omitempty"` // 模块序号
	VapIndex int32  `protobuf:"varint,2,opt,name=vapIndex,proto3" json:"vapIndex,omitempty"` // vap序号
	Attached int32  `protobuf:"varint,3,opt,name=attached,proto3" json:"attached,omitempty"` // 针对STA有效，关联AP的状态；
	Rsrp     int32  `protobuf:"varint,4,opt,name=rsrp,proto3" json:"rsrp,omitempty"`         // 信号强度,rssi
	Nosie    int32  `protobuf:"varint,5,opt,name=nosie,proto3" json:"nosie,omitempty"`       // 噪声强度
	RxRate   string `protobuf:"bytes,6,opt,name=rxRate,proto3" json:"rxRate,omitempty"`      // 协商速率,获取的值有参数，需要字符串类型
	TxRate   string `protobuf:"bytes,7,opt,name=txRate,proto3" json:"txRate,omitempty"`      // 协商速率,获取的值有参数
	Mac      string `protobuf:"bytes,8,opt,name=mac,proto3" json:"mac,omitempty"`            // sta看到AP的essid-mac，AP看到sta的mac
	Ssid     string `protobuf:"bytes,9,opt,name=ssid,proto3" json:"ssid,omitempty"`          // ap广播的ssid名称，sta接入的apssid名称
}

func (x *WlanLinkStatus) Reset() {
	*x = WlanLinkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WlanLinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WlanLinkStatus) ProtoMessage() {}

func (x *WlanLinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WlanLinkStatus.ProtoReflect.Descriptor instead.
func (*WlanLinkStatus) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{18}
}

func (x *WlanLinkStatus) GetModIndex() int32 {
	if x != nil {
		return x.ModIndex
	}
	return 0
}

func (x *WlanLinkStatus) GetVapIndex() int32 {
	if x != nil {
		return x.VapIndex
	}
	return 0
}

func (x *WlanLinkStatus) GetAttached() int32 {
	if x != nil {
		return x.Attached
	}
	return 0
}

func (x *WlanLinkStatus) GetRsrp() int32 {
	if x != nil {
		return x.Rsrp
	}
	return 0
}

func (x *WlanLinkStatus) GetNosie() int32 {
	if x != nil {
		return x.Nosie
	}
	return 0
}

func (x *WlanLinkStatus) GetRxRate() string {
	if x != nil {
		return x.RxRate
	}
	return ""
}

func (x *WlanLinkStatus) GetTxRate() string {
	if x != nil {
		return x.TxRate
	}
	return ""
}

func (x *WlanLinkStatus) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *WlanLinkStatus) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

// WLAN信号每秒上报,【AP只有用户接入时才上报】
type MsgHbWlanSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsApOrSta  bool              `protobuf:"varint,1,opt,name=isApOrSta,proto3" json:"isApOrSta,omitempty"`  // 是AP[true]设备还是STA[fals]
	LinkStatus []*WlanLinkStatus `protobuf:"bytes,2,rep,name=linkStatus,proto3" json:"linkStatus,omitempty"` // sta上报是只有一个
}

func (x *MsgHbWlanSignal) Reset() {
	*x = MsgHbWlanSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgHbWlanSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgHbWlanSignal) ProtoMessage() {}

func (x *MsgHbWlanSignal) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgHbWlanSignal.ProtoReflect.Descriptor instead.
func (*MsgHbWlanSignal) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{19}
}

func (x *MsgHbWlanSignal) GetIsApOrSta() bool {
	if x != nil {
		return x.IsApOrSta
	}
	return false
}

func (x *MsgHbWlanSignal) GetLinkStatus() []*WlanLinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return nil
}

// WiFi模块基本参数
type WlanModuleArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Mode       string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`             // 工作模式， 11ag，11an， 11ac， 11ax
	CfgChannel string `protobuf:"bytes,3,opt,name=cfgChannel,proto3" json:"cfgChannel,omitempty"` // 配置自动信号还是固定信道【固定则是固定的信道号】
	CurChannel string `protobuf:"bytes,4,opt,name=curChannel,proto3" json:"curChannel,omitempty"` // 当前工作信道
	Bandwidth  string `protobuf:"bytes,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`   // 工作频宽
	Txpower    string `protobuf:"bytes,6,opt,name=txpower,proto3" json:"txpower,omitempty"`       // 模块当前最大射频功率【配置的功率】
}

func (x *WlanModuleArgs) Reset() {
	*x = WlanModuleArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WlanModuleArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WlanModuleArgs) ProtoMessage() {}

func (x *WlanModuleArgs) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WlanModuleArgs.ProtoReflect.Descriptor instead.
func (*WlanModuleArgs) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{20}
}

func (x *WlanModuleArgs) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WlanModuleArgs) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *WlanModuleArgs) GetCfgChannel() string {
	if x != nil {
		return x.CfgChannel
	}
	return ""
}

func (x *WlanModuleArgs) GetCurChannel() string {
	if x != nil {
		return x.CurChannel
	}
	return ""
}

func (x *WlanModuleArgs) GetBandwidth() string {
	if x != nil {
		return x.Bandwidth
	}
	return ""
}

func (x *WlanModuleArgs) GetTxpower() string {
	if x != nil {
		return x.Txpower
	}
	return ""
}

// WiFi SSI配置信息
type WlanSsidAargs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModIndex int32  `protobuf:"varint,1,opt,name=modIndex,proto3" json:"modIndex,omitempty"` // ssid配置归属模组的编号
	Index    int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`       // ssid配置在模组上属于第几个
	WorkMode int32  `protobuf:"varint,3,opt,name=workMode,proto3" json:"workMode,omitempty"` // 工作模式，0：ap，1：sta，2：wds
	EncrType string `protobuf:"bytes,4,opt,name=encrType,proto3" json:"encrType,omitempty"`  // 加密方式
	EncrFunc string `protobuf:"bytes,5,opt,name=encrFunc,proto3" json:"encrFunc,omitempty"`  // 加密算法
	EncrPass string `protobuf:"bytes,6,opt,name=encrPass,proto3" json:"encrPass,omitempty"`  // 加密秘钥
}

func (x *WlanSsidAargs) Reset() {
	*x = WlanSsidAargs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WlanSsidAargs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WlanSsidAargs) ProtoMessage() {}

func (x *WlanSsidAargs) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WlanSsidAargs.ProtoReflect.Descriptor instead.
func (*WlanSsidAargs) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{21}
}

func (x *WlanSsidAargs) GetModIndex() int32 {
	if x != nil {
		return x.ModIndex
	}
	return 0
}

func (x *WlanSsidAargs) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WlanSsidAargs) GetWorkMode() int32 {
	if x != nil {
		return x.WorkMode
	}
	return 0
}

func (x *WlanSsidAargs) GetEncrType() string {
	if x != nil {
		return x.EncrType
	}
	return ""
}

func (x *WlanSsidAargs) GetEncrFunc() string {
	if x != nil {
		return x.EncrFunc
	}
	return ""
}

func (x *WlanSsidAargs) GetEncrPass() string {
	if x != nil {
		return x.EncrPass
	}
	return ""
}

// 传输文件请求和响应消息体，传输文件采用tcp流
type MsgFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         FileType `protobuf:"varint,1,opt,name=type,proto3,enum=gbcom.capwap.FileType" json:"type,omitempty"` // 文件类型
	Name         string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                             // 文件名称； 若是OMC向设备发送上传日志文件，则是客户端压缩后的文件名称
	NameWithPath string   `protobuf:"bytes,3,opt,name=nameWithPath,proto3" json:"nameWithPath,omitempty"`             // 带有路径的文件名称，OMC向客户端发起上传文件时，带有此参数，客户端上传到指定的路径文件
	StartTime    int64    `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`                  // 针对log&pcap,目标时间段开始
	EndTime      int64    `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`                      // 针对log&pcap,目标时间段结束
	Mac          string   `protobuf:"bytes,6,opt,name=mac,proto3" json:"mac,omitempty"`                               // 设备的mac地址，针对设备拉去配置文件有效;server端依据这个信息判断是哪个设备的请求消息
	Content      []byte   `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty"`                       // 文件二进制数据
}

func (x *MsgFile) Reset() {
	*x = MsgFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_capwap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MsgFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgFile) ProtoMessage() {}

func (x *MsgFile) ProtoReflect() protoreflect.Message {
	mi := &file_capwap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgFile.ProtoReflect.Descriptor instead.
func (*MsgFile) Descriptor() ([]byte, []int) {
	return file_capwap_proto_rawDescGZIP(), []int{22}
}

func (x *MsgFile) GetType() FileType {
	if x != nil {
		return x.Type
	}
	return FileType_Unknown
}

func (x *MsgFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MsgFile) GetNameWithPath() string {
	if x != nil {
		return x.NameWithPath
	}
	return ""
}

func (x *MsgFile) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MsgFile) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *MsgFile) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *MsgFile) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

var File_capwap_proto protoreflect.FileDescriptor

var file_capwap_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x22, 0xf1, 0x01, 0x0a,
	0x09, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70,
	0x77, 0x61, 0x70, 0x2e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61,
	0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x6d, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x05, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x22, 0xb4, 0x06, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x62, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x05, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x3b, 0x0a,
	0x0c, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77,
	0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0c, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67,
	0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x66, 0x67, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61,
	0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x43, 0x66, 0x67, 0x74, 0x61, 0x67, 0x73, 0x52,
	0x07, 0x63, 0x66, 0x67, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e,
	0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x68, 0x62, 0x4c, 0x74, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x62, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x62, 0x4c, 0x74,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0b, 0x68, 0x62, 0x4c, 0x74, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x0c, 0x68, 0x62, 0x57, 0x6c, 0x61, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x62, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x62, 0x57,
	0x6c, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0c, 0x68, 0x62, 0x57, 0x6c, 0x61,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0d, 0x68, 0x62, 0x42, 0x6f, 0x72,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73,
	0x67, 0x48, 0x62, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x68, 0x62, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x68, 0x62, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61,
	0x70, 0x2e, 0x4d, 0x73, 0x67, 0x48, 0x62, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x52, 0x0b, 0x68, 0x62, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x62, 0x6f, 0x72, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x62, 0x6f,
	0x72, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x76, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x43, 0x0a, 0x09, 0x4d, 0x73, 0x67, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67,
	0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4d, 0x73, 0x67, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x74, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0x48, 0x0a, 0x06, 0x43, 0x66, 0x67, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x66, 0x67, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x6e, 0x0a, 0x0c, 0x4d, 0x73, 0x67,
	0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x43,
	0x66, 0x74, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x62,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x66, 0x67, 0x54, 0x61,
	0x67, 0x52, 0x06, 0x43, 0x66, 0x74, 0x54, 0x61, 0x67, 0x22, 0x36, 0x0a, 0x0a, 0x4d, 0x73, 0x67,
	0x43, 0x66, 0x67, 0x74, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61,
	0x70, 0x77, 0x61, 0x70, 0x2e, 0x43, 0x66, 0x67, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x4c, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x63, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x72, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x71,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x72, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x73, 0x73, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x6e, 0x72, 0x22, 0x40, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x48, 0x62, 0x4c, 0x74, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x06, 0x6c, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x06,
	0x6c, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x73,
	0x66, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x66, 0x70, 0x41,
	0x72, 0x67, 0x73, 0x52, 0x03, 0x73, 0x66, 0x70, 0x22, 0xa3, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x72,
	0x74, 0x53, 0x66, 0x70, 0x41, 0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x78,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x78, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x42, 0x69, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x78, 0x42, 0x69, 0x61, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x63, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x76, 0x63, 0x63, 0x22, 0x33,
	0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x64,
	0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x44, 0x0a, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x3f, 0x0a, 0x10, 0x4d, 0x73, 0x67, 0x48, 0x62, 0x42,
	0x6f, 0x72, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x6f,
	0x72, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x62, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x52,
	0x06, 0x62, 0x6f, 0x72, 0x61, 0x64, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x48, 0x62,
	0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x22, 0x79, 0x0a, 0x09, 0x4c, 0x74, 0x65,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6d, 0x65, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x73, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x6d, 0x73, 0x69, 0x22, 0xe3, 0x01, 0x0a, 0x0c, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x72, 0x61,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x69, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x6c, 0x74, 0x65, 0x4d, 0x6f,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4c, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x07, 0x6c, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x57,
	0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x61, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x72, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x73, 0x72, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x73, 0x69, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6e, 0x6f, 0x73, 0x69, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x78, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x61, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x73, 0x69,
	0x64, 0x22, 0x6d, 0x0a, 0x0f, 0x4d, 0x73, 0x67, 0x48, 0x62, 0x57, 0x6c, 0x61, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x41, 0x70, 0x4f, 0x72, 0x53, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41, 0x70, 0x4f, 0x72, 0x53,
	0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x57, 0x6c, 0x61, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x57, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x66, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x66, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x78, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x78,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x0d, 0x57, 0x6c, 0x61, 0x6e, 0x53, 0x73,
	0x69, 0x64, 0x41, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x6e, 0x63, 0x72, 0x50, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x6e, 0x63, 0x72, 0x50, 0x61, 0x73, 0x73, 0x22, 0xd1, 0x01, 0x0a, 0x07, 0x4d, 0x73,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77,
	0x61, 0x70, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x6d,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2a, 0x17, 0x0a,
	0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x62, 0x63, 0x6f, 0x6d, 0x10, 0x00, 0x2a, 0x4d, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x72, 0x61, 0x70, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x10, 0x04, 0x2a, 0xfd, 0x01, 0x0a, 0x0b, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x66, 0x67,
	0x74, 0x61, 0x67, 0x73, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x09, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x62, 0x4c, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x10, 0x0a,
	0x12, 0x10, 0x0a, 0x0c, 0x48, 0x62, 0x57, 0x6c, 0x61, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x62, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x62, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x6f, 0x72, 0x61, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x10, 0x0e, 0x2a, 0x27, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x6b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x10, 0x01, 0x2a, 0x54,
	0x0a, 0x10, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x10, 0x03, 0x2a, 0xa7, 0x03, 0x0a, 0x0a, 0x43, 0x66, 0x67, 0x54, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x63, 0x6e, 0x73, 0x73, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x64, 0x64, 0x6e, 0x73, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x68, 0x63, 0x70,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x68, 0x63, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x64, 0x72, 0x6f, 0x70, 0x62, 0x65, 0x61, 0x72, 0x10, 0x05, 0x12, 0x07,
	0x0a, 0x03, 0x65, 0x63, 0x6d, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x64,
	0x6c, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x10,
	0x08, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x73, 0x74, 0x61, 0x62, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05,
	0x69, 0x70, 0x73, 0x65, 0x63, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x75, 0x63, 0x69, 0x10,
	0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x10, 0x0c, 0x12, 0x0b, 0x0a,
	0x07, 0x6d, 0x63, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x63,
	0x73, 0x64, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x77, 0x61, 0x6e,
	0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x10, 0x12,
	0x07, 0x0a, 0x03, 0x6e, 0x73, 0x73, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x70, 0x70, 0x6f,
	0x65, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x71, 0x63, 0x61, 0x63, 0x66, 0x67, 0x38, 0x30, 0x32,
	0x31, 0x31, 0x10, 0x13, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x69, 0x70, 0x64, 0x10, 0x14, 0x12, 0x08,
	0x0a, 0x04, 0x72, 0x70, 0x63, 0x64, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x73, 0x74, 0x70,
	0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x6b, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x72, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x73, 0x73, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x73, 0x74,
	0x61, 0x74, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x1a,
	0x12, 0x0b, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x1b, 0x12, 0x0c, 0x0a,
	0x08, 0x75, 0x62, 0x6f, 0x6f, 0x74, 0x65, 0x6e, 0x76, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x75,
	0x63, 0x69, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x10, 0x1d, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x68, 0x74,
	0x74, 0x70, 0x64, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x75, 0x70, 0x6e, 0x70, 0x64, 0x10, 0x1f,
	0x12, 0x0c, 0x0a, 0x08, 0x77, 0x69, 0x72, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x10, 0x20, 0x2a, 0x4b,
	0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x74,
	0x68, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x66, 0x70, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x74, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x46, 0x69, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x62, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x10, 0x05, 0x2a, 0x56, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x63, 0x61, 0x70, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x61,
	0x72, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x78,
	0x74, 0x10, 0x05, 0x32, 0x4a, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x15, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d,
	0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x15, 0x2e, 0x67, 0x62, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x61, 0x70, 0x77, 0x61, 0x70, 0x2e, 0x4d, 0x73, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x42,
	0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x63, 0x61, 0x70, 0x77, 0x61, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_capwap_proto_rawDescOnce sync.Once
	file_capwap_proto_rawDescData = file_capwap_proto_rawDesc
)

func file_capwap_proto_rawDescGZIP() []byte {
	file_capwap_proto_rawDescOnce.Do(func() {
		file_capwap_proto_rawDescData = protoimpl.X.CompressGZIP(file_capwap_proto_rawDescData)
	})
	return file_capwap_proto_rawDescData
}

var file_capwap_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_capwap_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_capwap_proto_goTypes = []interface{}{
	(VendorType)(0),          // 0: gbcom.capwap.VendorType
	(MsgType)(0),             // 1: gbcom.capwap.MsgType
	(MsgCodeType)(0),         // 2: gbcom.capwap.MsgCodeType
	(ErrCodeType)(0),         // 3: gbcom.capwap.ErrCodeType
	(OnlineStatusType)(0),    // 4: gbcom.capwap.OnlineStatusType
	(CfgTagType)(0),          // 5: gbcom.capwap.CfgTagType
	(PortType)(0),            // 6: gbcom.capwap.PortType
	(FileType)(0),            // 7: gbcom.capwap.FileType
	(*MsgHeader)(nil),        // 8: gbcom.capwap.MsgHeader
	(*Message)(nil),          // 9: gbcom.capwap.Message
	(*MsgDiscover)(nil),      // 10: gbcom.capwap.MsgDiscover
	(*MsgOnline)(nil),        // 11: gbcom.capwap.MsgOnline
	(*MsgAlarm)(nil),         // 12: gbcom.capwap.MsgAlarm
	(*CfgTag)(nil),           // 13: gbcom.capwap.CfgTag
	(*MsgKeepalive)(nil),     // 14: gbcom.capwap.MsgKeepalive
	(*MsgCfgtags)(nil),       // 15: gbcom.capwap.MsgCfgtags
	(*LteSinal)(nil),         // 16: gbcom.capwap.LteSinal
	(*MsgHbLteSignal)(nil),   // 17: gbcom.capwap.MsgHbLteSignal
	(*PortStatistics)(nil),   // 18: gbcom.capwap.PortStatistics
	(*PortSfpArgs)(nil),      // 19: gbcom.capwap.PortSfpArgs
	(*Usage)(nil),            // 20: gbcom.capwap.Usage
	(*Borad)(nil),            // 21: gbcom.capwap.Borad
	(*MsgHbBoradStatus)(nil), // 22: gbcom.capwap.MsgHbBoradStatus
	(*MsgHbPerMinute)(nil),   // 23: gbcom.capwap.MsgHbPerMinute
	(*LteModule)(nil),        // 24: gbcom.capwap.LteModule
	(*MsgBoradInfo)(nil),     // 25: gbcom.capwap.MsgBoradInfo
	(*WlanLinkStatus)(nil),   // 26: gbcom.capwap.WlanLinkStatus
	(*MsgHbWlanSignal)(nil),  // 27: gbcom.capwap.MsgHbWlanSignal
	(*WlanModuleArgs)(nil),   // 28: gbcom.capwap.WlanModuleArgs
	(*WlanSsidAargs)(nil),    // 29: gbcom.capwap.WlanSsidAargs
	(*MsgFile)(nil),          // 30: gbcom.capwap.MsgFile
}
var file_capwap_proto_depIdxs = []int32{
	0,  // 0: gbcom.capwap.MsgHeader.vendor:type_name -> gbcom.capwap.VendorType
	2,  // 1: gbcom.capwap.MsgHeader.mcode:type_name -> gbcom.capwap.MsgCodeType
	3,  // 2: gbcom.capwap.MsgHeader.ecode:type_name -> gbcom.capwap.ErrCodeType
	1,  // 3: gbcom.capwap.Message.type:type_name -> gbcom.capwap.MsgType
	8,  // 4: gbcom.capwap.Message.header:type_name -> gbcom.capwap.MsgHeader
	12, // 5: gbcom.capwap.Message.alarm:type_name -> gbcom.capwap.MsgAlarm
	10, // 6: gbcom.capwap.Message.discover:type_name -> gbcom.capwap.MsgDiscover
	11, // 7: gbcom.capwap.Message.onlineStatus:type_name -> gbcom.capwap.MsgOnline
	14, // 8: gbcom.capwap.Message.keepalive:type_name -> gbcom.capwap.MsgKeepalive
	15, // 9: gbcom.capwap.Message.cfgtags:type_name -> gbcom.capwap.MsgCfgtags
	30, // 10: gbcom.capwap.Message.versionUpgrade:type_name -> gbcom.capwap.MsgFile
	30, // 11: gbcom.capwap.Message.configUpgrade:type_name -> gbcom.capwap.MsgFile
	17, // 12: gbcom.capwap.Message.hbLteSignal:type_name -> gbcom.capwap.MsgHbLteSignal
	27, // 13: gbcom.capwap.Message.hbWlanSignal:type_name -> gbcom.capwap.MsgHbWlanSignal
	22, // 14: gbcom.capwap.Message.hbBoradStatus:type_name -> gbcom.capwap.MsgHbBoradStatus
	23, // 15: gbcom.capwap.Message.hbPerMinute:type_name -> gbcom.capwap.MsgHbPerMinute
	25, // 16: gbcom.capwap.Message.boradInfo:type_name -> gbcom.capwap.MsgBoradInfo
	4,  // 17: gbcom.capwap.MsgOnline.status:type_name -> gbcom.capwap.OnlineStatusType
	5,  // 18: gbcom.capwap.CfgTag.type:type_name -> gbcom.capwap.CfgTagType
	13, // 19: gbcom.capwap.MsgKeepalive.CftTag:type_name -> gbcom.capwap.CfgTag
	13, // 20: gbcom.capwap.MsgCfgtags.tags:type_name -> gbcom.capwap.CfgTag
	16, // 21: gbcom.capwap.MsgHbLteSignal.lteMod:type_name -> gbcom.capwap.LteSinal
	19, // 22: gbcom.capwap.PortStatistics.sfp:type_name -> gbcom.capwap.PortSfpArgs
	20, // 23: gbcom.capwap.Borad.diskUsages:type_name -> gbcom.capwap.Usage
	18, // 24: gbcom.capwap.Borad.portStatistics:type_name -> gbcom.capwap.PortStatistics
	21, // 25: gbcom.capwap.MsgHbBoradStatus.borads:type_name -> gbcom.capwap.Borad
	24, // 26: gbcom.capwap.MsgBoradInfo.lteMods:type_name -> gbcom.capwap.LteModule
	26, // 27: gbcom.capwap.MsgHbWlanSignal.linkStatus:type_name -> gbcom.capwap.WlanLinkStatus
	7,  // 28: gbcom.capwap.MsgFile.type:type_name -> gbcom.capwap.FileType
	30, // 29: gbcom.capwap.FileTransport.GetFile:input_type -> gbcom.capwap.MsgFile
	30, // 30: gbcom.capwap.FileTransport.GetFile:output_type -> gbcom.capwap.MsgFile
	30, // [30:31] is the sub-list for method output_type
	29, // [29:30] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_capwap_proto_init() }
func file_capwap_proto_init() {
	if File_capwap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_capwap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgDiscover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CfgTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgKeepalive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgCfgtags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LteSinal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHbLteSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSfpArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Borad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHbBoradStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHbPerMinute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LteModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgBoradInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WlanLinkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgHbWlanSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WlanModuleArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WlanSsidAargs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_capwap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MsgFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_capwap_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_capwap_proto_goTypes,
		DependencyIndexes: file_capwap_proto_depIdxs,
		EnumInfos:         file_capwap_proto_enumTypes,
		MessageInfos:      file_capwap_proto_msgTypes,
	}.Build()
	File_capwap_proto = out.File
	file_capwap_proto_rawDesc = nil
	file_capwap_proto_goTypes = nil
	file_capwap_proto_depIdxs = nil
}
